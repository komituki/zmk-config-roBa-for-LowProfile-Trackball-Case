#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

&trackball {
    automouse-layer = <4>;
    scroll-layers = <5>;

    // arrows {
    //     layers = <3>;
    //     bindings =
    //         <&kp RIGHT_ARROW>,
    //         <&kp LEFT_ARROW>,
    //         <&kp UP_ARROW>,
    //         <&kp DOWN_ARROW>;
    //     tick = <10>;
    //     wait-ms = <5>;
    //     tap-ms = <5>;
    // };
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };

        eq {
            bindings = <&kp EQUAL>;
            key-positions = <24 25>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&lt_to_layer_0 4 Q  &kp W      &kp E         &kp R               &lt 6 T                                               &kp Y        &kp U  &lt 5 I    &kp O    &kp P
&mt LCTRL A         &kp S      &kp D         &kp F               &kp G        &kp LS(LG(S))             &kp MINUS      &kp H        &kp J  &kp K      &kp L    &mt RCTRL SEMICOLON
&mt LEFT_SHIFT Z    &kp X      &kp C         &kp V               &kp B        &kp COLON                 &kp SEMICOLON  &kp N        &kp M  &kp COMMA  &kp DOT  &mt RIGHT_SHIFT SLASH
&kp LEFT_SHIFT      &kp LCTRL  &kp LEFT_ALT  &mt LEFT_WIN LANG1  &lt 1 SPACE  &lt_to_layer_0 5 TAB      &kp BACKSPACE  &lt 2 ENTER                             &kp ESCAPE
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS  &kp SQT               &kp DOUBLE_QUOTES  &kp LC(X)                       &kp F10         &kp DOLLAR       &kp PERCENT     &kp CARET       &kp AMPERSAND
&kp LEFT_BRACKET      &kp RIGHT_BRACKET      &kp PIPE              &kp LC(Z)          &kp LC(C)  &trans      &trans   &kp LEFT_ARROW  &kp UP_ARROW     &kp DOWN_ARROW  &kp LEFT_ARROW  &trans
&kp LEFT_BRACE        &kp RIGHT_BRACE        &kp NON_US_BACKSLASH  &kp LC(Y)          &kp LC(V)  &trans      &trans   &trans          &kp EXCLAMATION  &kp UNDERSCORE  &kp AT_SIGN     &kp HASH
&trans                &trans                 &trans                &trans             &trans     &trans      &kp DEL  &trans                                                           &kp LC(LA(DEL))
            >;
        };

        NUM {
            bindings = <
&kp N0        &kp N7  &kp N8  &kp N9  &kp EQUAL                                               &trans    &trans  &trans  &trans  &kp LG(LS(S))
&kp ASTERISK  &kp N4  &kp N5  &kp N6  &kp PLUS   &kp LC(LA(KP_NUMBER_0))      &kp UNDERSCORE  &kp HOME  &trans  &trans  &trans  &trans
&kp SLASH     &kp N1  &kp N2  &kp N3  &kp MINUS  &kp EQUAL                    &trans          &kp END   &trans  &trans  &trans  &trans
&trans        &trans  &trans  &trans  &trans     &trans                       &trans          &trans                            &trans
            >;
        };

        ARROW {
            bindings = <
&kp ESCAPE      &kp LC(LS(TAB))         &kp UP_ARROW    &kp LC(TAB)              &trans                       &trans  &trans  &trans  &trans  &trans
&kp HOME        &kp LEFT_ARROW          &kp DOWN_ARROW  &kp RIGHT_ARROW          &kp END  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&kp LEFT_SHIFT  &kp LG(LS(LEFT_ARROW))  &trans          &kp LG(LS(RIGHT_ARROW))  &trans   &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans          &trans                  &trans          &trans                   &trans   &trans      &trans  &trans                          &trans
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans     &trans  &trans  &trans     &kp LC(X)                      &trans  &trans    &trans    &trans    &trans
&kp LCTRL  &trans  &trans  &kp LC(Z)  &kp LC(C)  &trans      &trans  &trans  &mkp MB1  &mkp MB3  &mkp MB2  &trans
&trans     &trans  &trans  &kp LC(Y)  &kp LC(V)  &trans      &trans  &trans  &trans    &trans    &trans    &trans
&trans     &trans  &trans  &trans     &trans     &trans      &trans  &trans                                &trans
            >;
        };

        SCROLL {
            bindings = <
&kp F1   &kp F2   &kp F3  &kp F4  &kp F5                      &kp F6  &kp F6  &kp F8  &kp F9  &kp F10
&kp F11  &kp F12  &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans   &trans  &trans  &trans  &trans      &trans  &trans  &trans  &trans  &trans  &trans
&trans   &trans   &trans  &trans  &trans  &trans      &trans  &trans                          &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans        &trans        &trans        &trans                           &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_SEL 4
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans        &trans        &trans        &trans        &trans
&trans  &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &trans  &trans      &bootloader  &trans        &trans        &trans        &trans        &bt BT_CLR
&trans  &trans        &trans        &trans        &trans  &trans      &trans       &trans                                                  &bt BT_CLR_ALL
            >;
        };
    };
};
